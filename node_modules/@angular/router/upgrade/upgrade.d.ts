/**
 * @license Angular v9.1.12
 * (c) 2010-2020 Google LLC. https://angular.io/
 * License: MIT
 */

import { ComponentRef } from '@angular/core';
import { InjectionToken } from '@angular/core';
import { UpgradeModule } from '@angular/upgrade/static';

/**
 * Creates an initializer that sets up `ngRoute` integration
 * along with setting up the Angular router.
 *
 * @usageNotes
 *
 * <code-example language="typescript">
 * @NgModule({
 *  imports: [
 *   RouterModule.forRoot(SOME_ROUTES),
 *   UpgradeModule
 * ],
 * providers: [
 *   RouterUpgradeInitializer
 * ]
 * })
 * export class AppModule {
 *   ngDoBootstrap() {}
 * }
 * </code-example>
 *
 * @publicApi
 */
export declare const RouterUpgradeInitializer: {
    provide: InjectionToken<((compRef: ComponentRef<any>) => void)[]>;
    multi: boolean;
    useFactory: (ngUpgrade: UpgradeModule) => () => void;
    deps: (typeof UpgradeModule)[];
};

/**
 * Sets up a location change listener to trigger `history.pushState`.
 * Works around the problem that `onPopState` does not trigger `history.pushState`.
 * Must be called *after* calling `UpgradeModule.bootstrap`.
 *
 * @param ngUpgrade The upgrade NgModule.
 * @param urlType The location strategy.
 * @see `HashLocationStrategy`
 * @see `PathLocationStrategy`
 *
 * @publicApi
 */
export declare function setUpLocationSync(ngUpgrade: UpgradeModule, urlType?: 'path' | 'hash'): void;

export { }

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBncmFkZS5kLnRzIiwic291cmNlcyI6WyJ1cGdyYWRlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIEFuZ3VsYXIgdjkuMS4xMlxuICogKGMpIDIwMTAtMjAyMCBHb29nbGUgTExDLiBodHRwczovL2FuZ3VsYXIuaW8vXG4gKiBMaWNlbnNlOiBNSVRcbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVXBncmFkZU1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3VwZ3JhZGUvc3RhdGljJztcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIGluaXRpYWxpemVyIHRoYXQgc2V0cyB1cCBgbmdSb3V0ZWAgaW50ZWdyYXRpb25cclxuICogYWxvbmcgd2l0aCBzZXR0aW5nIHVwIHRoZSBBbmd1bGFyIHJvdXRlci5cclxuICpcclxuICogQHVzYWdlTm90ZXNcclxuICpcclxuICogPGNvZGUtZXhhbXBsZSBsYW5ndWFnZT1cInR5cGVzY3JpcHRcIj5cclxuICogQE5nTW9kdWxlKHtcclxuICogIGltcG9ydHM6IFtcclxuICogICBSb3V0ZXJNb2R1bGUuZm9yUm9vdChTT01FX1JPVVRFUyksXHJcbiAqICAgVXBncmFkZU1vZHVsZVxyXG4gKiBdLFxyXG4gKiBwcm92aWRlcnM6IFtcclxuICogICBSb3V0ZXJVcGdyYWRlSW5pdGlhbGl6ZXJcclxuICogXVxyXG4gKiB9KVxyXG4gKiBleHBvcnQgY2xhc3MgQXBwTW9kdWxlIHtcclxuICogICBuZ0RvQm9vdHN0cmFwKCkge31cclxuICogfVxyXG4gKiA8L2NvZGUtZXhhbXBsZT5cclxuICpcclxuICogQHB1YmxpY0FwaVxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgUm91dGVyVXBncmFkZUluaXRpYWxpemVyOiB7XHJcbiAgICBwcm92aWRlOiBJbmplY3Rpb25Ub2tlbjwoKGNvbXBSZWY6IENvbXBvbmVudFJlZjxhbnk+KSA9PiB2b2lkKVtdPjtcclxuICAgIG11bHRpOiBib29sZWFuO1xyXG4gICAgdXNlRmFjdG9yeTogKG5nVXBncmFkZTogVXBncmFkZU1vZHVsZSkgPT4gKCkgPT4gdm9pZDtcclxuICAgIGRlcHM6ICh0eXBlb2YgVXBncmFkZU1vZHVsZSlbXTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZXRzIHVwIGEgbG9jYXRpb24gY2hhbmdlIGxpc3RlbmVyIHRvIHRyaWdnZXIgYGhpc3RvcnkucHVzaFN0YXRlYC5cclxuICogV29ya3MgYXJvdW5kIHRoZSBwcm9ibGVtIHRoYXQgYG9uUG9wU3RhdGVgIGRvZXMgbm90IHRyaWdnZXIgYGhpc3RvcnkucHVzaFN0YXRlYC5cclxuICogTXVzdCBiZSBjYWxsZWQgKmFmdGVyKiBjYWxsaW5nIGBVcGdyYWRlTW9kdWxlLmJvb3RzdHJhcGAuXHJcbiAqXHJcbiAqIEBwYXJhbSBuZ1VwZ3JhZGUgVGhlIHVwZ3JhZGUgTmdNb2R1bGUuXHJcbiAqIEBwYXJhbSB1cmxUeXBlIFRoZSBsb2NhdGlvbiBzdHJhdGVneS5cclxuICogQHNlZSBgSGFzaExvY2F0aW9uU3RyYXRlZ3lgXHJcbiAqIEBzZWUgYFBhdGhMb2NhdGlvblN0cmF0ZWd5YFxyXG4gKlxyXG4gKiBAcHVibGljQXBpXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBzZXRVcExvY2F0aW9uU3luYyhuZ1VwZ3JhZGU6IFVwZ3JhZGVNb2R1bGUsIHVybFR5cGU/OiAncGF0aCcgfCAnaGFzaCcpOiB2b2lkO1xyXG5cclxuZXhwb3J0IHsgfVxyXG4iXX0=